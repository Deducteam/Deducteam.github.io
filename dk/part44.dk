#NAME part44.

  o : Type.

  def eps : o -> Type.

i : Type.

  imp : o -> o -> o.
  [x, y] eps (imp x y) --> (eps x) -> (eps y).

  def bot : o.
  [ ] eps bot --> z:o -> (eps z).

  def not : o -> o := x:o => imp x bot.

  def or : o -> o -> o.
  [x, y] eps (or x y)
          --> z:o -> (eps x -> eps z) -> (eps y -> eps z) -> eps z.

  def fa_i : (i -> o) -> o.
  [y] eps (fa_i y) --> x:i -> eps (y x).

P: i -> i -> o.
a : i.
b : i.
d1: eps (fa_i (x => fa_i (y => or (P a x) (or (P y b) (P y x))))).
d2: eps (fa_i (x => fa_i (y => or (not (P a x)) (not (P y b))))).
def c1 : x : i -> y : i -> (eps (P a x) -> eps bot) ->
                           (eps (P y b) -> eps bot) ->
                           (eps (P y x) -> eps bot) -> eps bot
       := x => y => l1 => l2 => l3 => z =>
          d1 x y z (l1' => l1 l1' z)
             (sb1 => sb1 z (l2' => l2 l2' z) (l3' => l3 l3' z)).
def c2 : x : i -> y : i -> ((eps (P a x) -> eps bot) -> eps bot) ->
                           ((eps (P y b) -> eps bot) -> eps bot) -> eps bot
       := x => y => l1 => l2 => z =>
          d2 x y z (l1' => l1 l1' z) (l2' => l2 l2' z).
def c3 : (eps (P a b) -> eps bot) -> eps bot
       := l1 => c1 b a l1 l1 l1.
def c4 : x : i -> ((eps (P a x) -> eps bot) -> eps bot) -> eps bot
       := x => l1 => c3 (tp => c2 x a l1 (tnp => tnp tp)).
def c5 : eps bot := c3 (tp => c4 b (tnp => tnp tp)).

eq : i -> i -> o.
0 : i.
S : i -> i.
def plus : i -> i -> i.

[x] plus 0 x --> x.
[x, y] plus (S x) y --> S (plus x y).
def one : i := S 0.
def two : i := S one.

d'1 : eps(eq 0 0).
d'2 : eps(fa_i (x => fa_i (y => or (eq (S x) (S y)) (not (eq x y))))).
d'3 : eps(fa_i (x => not (eq (plus x one) two))).

def c'1 : (eps(eq 0 0) -> eps bot) -> eps bot := l1 => l1 d'1.
def c'2 : x : i -> y : i -> (eps (eq (S x) (S y)) -> eps bot) ->
         (eps (not (eq x y)) -> eps bot) -> eps bot
       := x => y => l1 => l2 => z => d'2 x y z (l1' => l1 l1' z)
                                        (l2' => l2 l2' z).
def c'3 : x : i -> (eps (not (eq (plus x one) two)) -> eps bot) ->
         eps bot
       := x => l1 => l1 (d'3 x).
def c'4 : y : i -> (eps (not (eq (S (plus y one)) two)) -> eps bot) ->
         eps bot
       := y => l1 => c'3 (S y) l1.
def c'5 : y : i -> (eps (not (eq (plus y one) one)) -> eps bot) ->
         eps bot
       := y => l1 => c'2 (plus y one) one
       (tp => c'4 y (tnp => tnp tp)) l1.
def c'6 : (eps (not (eq one one)) -> eps bot) -> eps bot
       := l1 => c'5 0 l1.
def c'7 : (eps (not (eq 0 0)) -> eps bot) -> eps bot
       := l1 => c'2 0 0 (tp => c'6 (tnp => tnp tp)) l1.
def c'8 : eps bot := c'1 (tp => c'7 (tnp => tnp tp)).
