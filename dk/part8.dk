#NAME part8.

U_Type : Type.
U_Kind : Type.

def e_Type : U_Type -> Type.
def e_Kind : U_Kind -> Type.

u_Type : U_Kind.

pi_TypeType : a : U_Type -> b : (e_Type a -> U_Type) -> U_Type.
pi_TypeKind : a : U_Type -> b : (e_Type a -> U_Kind) -> U_Kind.
pi_KindType : a : U_Kind -> b : (e_Kind a -> U_Type) -> U_Type.
pi_KindKind : a : U_Kind -> b : (e_Kind a -> U_Kind) -> U_Kind.

[ ] e_Kind u_Type --> U_Type.

[a, b]
  e_Type (pi_TypeType a b) --> x : e_Type a -> e_Type (b x).
[a, b]
  e_Kind (pi_TypeKind a b) --> x : e_Type a -> e_Kind (b x).
[a, b]
  e_Type (pi_KindType a b) --> x : e_Kind a -> e_Type (b x).
[a, b]
  e_Kind (pi_KindKind a b) --> x : e_Kind a -> e_Kind (b x).


a : U_Type.
b : U_Type.
x : e_Type a.
f : (p : (e_Type a -> U_Type) -> e_Type (p x) -> e_Type b).

def example : e_Type b := f (y : e_Type a => a) x.

list : U_Type -> U_Type.
nil : A : U_Type -> e_Type (list A).
cons : A : U_Type -> e_Type A -> e_Type (list A) -> e_Type (list A).

List : U_Type -> Type.
[A] e_Type (list A) --> List A.

def elim_list : A : U_Type -> P : (e_Type (list A) -> U_Type) ->
  e_Type (P (nil A)) ->
  (x : e_Type A -> l2 : e_Type (list A) -> e_Type (P l2) -> e_Type (P (cons A x l2))) ->
  l : e_Type (list A) -> e_Type (P l).

[A, P, case_nil, case_cons]
  elim_list _ P case_nil case_cons (nil A) -->
  case_nil.
[A, P, case_nil, case_cons, x, l]
  elim_list _ P case_nil case_cons (cons A x l) -->
  case_cons x l (elim_list A P case_nil case_cons l).

def append : A : U_Type -> List A -> List A -> List A :=
  A : U_Type => l1 : List A => l2 : List A =>
  elim_list A (__ => list A) l2 (x => l3 => l3l2 => cons A x l3l2) l1.

nat : Type.
0 : nat.
S : nat -> nat.

U : nat -> Type.
def eps : i : nat -> U i -> Type.

u : i : nat -> U (S i).
[i] eps _ (u i) --> U i.

def pi : i : nat -> a : U i -> b : (eps i a -> U i) -> U i.
[i, a, b] eps _ (pi i a b) --> x : eps i a -> eps i (b x).

lift : i : nat -> U i -> U (S i).
[i, a] eps _ (lift i a) --> eps i a.

[i, a, b] pi _ (lift i a) (x => lift {i} (b x)) -->
          lift i (pi i a (x => b x)).


