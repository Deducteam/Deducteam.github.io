#NAME part3.

nat : Type.

0 : nat.
S : nat -> nat.

def plus : nat -> nat -> nat.
[n] plus 0 n --> n.
[n1, n2] plus (S n1) n2 --> S (plus n1 n2).

[n] plus 0 n --> n
[n1, n2] plus (S n1) n2 --> S (plus n1 n2).

[n1, n2, n3] plus n1 (plus n2 n3) --> plus (plus n1 n2) n3.

def two := S (S 0).

def K2 := x:nat => two.

A: Type.

vector: nat -> Type.
Nil : vector 0.
Cons : n : nat -> A -> vector n -> vector (S n).

def tail: n:nat -> vector (S n) -> vector n.
[n, m, a, l] tail n (Cons m a l) --> l.

[n, a, l] tail n (Cons _ a l) --> l.

[l] tail _ (Cons _ _ l) --> l.

[n, a, l] tail n (Cons {n} a l) --> l.
